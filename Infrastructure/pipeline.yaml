AWSTemplateFormatVersion: 2010-09-09
Description: CodePipeline

Parameters:
  EnvLabel:
    Description: Name of the environment this cloudformation stack belongs to
    Type: String

  EnvType:
    Default: nonproduction
    Description: Type of the environment for this stack
    Type: String
    AllowedValues:
      - nonproduction
      - production
  # NOTE: this needs to be lower case as repository name does not take upper case

  SubSystem:
    Type: String
    Description: Subsystem Code (should be all lowercases)
    AllowedPattern: "^[a-z]+$"

  ServiceName:
    Type: String
    Description: Name of the service under particular subsystem

  GitUser:
    Type: String

  GitRepo:
    Type: String

  GitBranch:
    Type: String
    Default: master

  GitOauthToken:
    Type: String

  DockerRepoUrl:
    Type: String

  SourcePath:
    Type: String
    Default: ./

Resources:
  CloudFormationIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', [!Ref 'AWS::StackName', 'CloudFormation']]
      Path: /
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - cloudformation.amazonaws.com
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - iam:CreateRole
            - iam:AttachRolePolicy
            - iam:PutRolePolicy
            - iam:PassRole
            - iam:DetachRolePolicy
            - iam:ListRolePolicies
            - iam:GetRole
            - iam:DeleteRolePolicy
            - iam:UpdateRoleDescription
            - iam:ListRoles
            - iam:DeleteRole
            - iam:GetRolePolicy
            - iam:CreateInstanceProfile
            - iam:AddRoleToInstanceProfile
            - iam:DeleteInstanceProfile
            - iam:GetInstanceProfile
            - iam:ListInstanceProfiles
            - iam:ListInstanceProfilesForRole
            - iam:RemoveRoleFromInstanceProfile
            Effect: Allow
            Resource:
            - !Sub "arn:aws:iam::*:role/${AWS::StackName}*"
            - !Sub "arn:aws:iam::*:instance-profile/${AWS::StackName}*"
          - Action:
            - ssm:GetParameters
            - s3:*
            - ecs:*
            - logs:*
            - elasticloadbalancing:*
            Effect: Allow
            Resource: '*'
          - Resource: "*"
            Effect: Allow
            Action:
            - iam:PassRole
        PolicyName: !Join ['-', [!Ref 'AWS::StackName', 'CloudFormationRolePolicy']]

  CodeBuildIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', [!Ref 'AWS::StackName', 'CodeBuild']]
      Path: "/"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: !Join ['-', [!Ref 'AWS::StackName', 'CodeBuildRolePolicy']]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                  - codecommit:*
                  - s3:*
                  - ecr:*
                Resource: '*'

  CodePipelineIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', [!Ref 'AWS::StackName', 'CodePipeline']]
      Path: /
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
          Sid: 1
      Policies:
        - PolicyName: !Join ['-', [!Ref 'AWS::StackName', 'CodePipelineRolePolicy']]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:*
                  - cloudformation:*
                  - ecs:*
                  - cloudwatch:*
              - Resource: "*"
                Effect: Allow
                Action:
                  - cloudformation:*
              - Resource: "*"
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                - iam:PassRole

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !ImportValue BucketCodePipeline
        Type: S3
      RoleArn: !GetAtt CodePipelineIAMRole.Arn
      Stages:
        - Name: GitPullStage
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: "1"
                Provider: GitHub
              Configuration:
                Owner: !Ref GitUser
                Repo: !Ref GitRepo
                Branch: !Ref GitBranch
                OAuthToken: !Ref GitOauthToken
              OutputArtifacts:
              - Name: ServiceSource

        - Name: CodeBuildStage
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              InputArtifacts:
              - Name: ServiceSource
              OutputArtifacts:
              - Name: BuildArtifacts
              Configuration:
                ProjectName: !Ref CodeBuild

  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-code-build
      Description: Docker build
      ServiceRole: !GetAtt CodeBuildIAMRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo "CODEBUILD_RESOLVED_SOURCE_VERSION is ${CODEBUILD_RESOLVED_SOURCE_VERSION}"
                - $(aws ecr get-login --no-include-email)
                - COMMIT="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
                - echo "Current Git commit is ${COMMIT}"
                - WORKDIR=$(pwd)
                - SERVICE_VERSION=$(make -s version | xargs)
            build:
              commands:
                - echo "Buiding image ..."
                - cd $SOURCE_PATH
                - echo "Building ${DOCKER_REPO_URL}:${SERVICE_VERSION}"
                - docker build --tag "${DOCKER_REPO_URL}:${SERVICE_VERSION}" .
                - echo "Pushing ${DOCKER_REPO_URL}:${SERVICE_VERSION}"
                - docker push "${DOCKER_REPO_URL}:${SERVICE_VERSION}"
            post_build:
              commands:
                - cd $WORKDIR
                - echo "Creating release.json ..."
                - printf '{"Parameters":{"ServiceVersion":"%s"}}' $SERVICE_VERSION > release.json
                - cat release.json
                - echo "Build complete."
          artifacts:
            files:
              - release.json
              - Infrastructure/*
            discard-paths: yes
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:17.09.0
        EnvironmentVariables:
        - Name: DOCKER_REPO_URL
          Value: !Ref DockerRepoUrl
        - Name: SOURCE_PATH
          Value: !Ref SourcePath
